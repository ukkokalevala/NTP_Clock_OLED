#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <WiFi.h>
#include <WiFiUdp.h>
#include <NTPClient.h>

// OLED display setup
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
#define OLED_RESET -1
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

// Wi-Fi credentials
const char* ssid = "yourSSID";      // Replace with your SSID
const char* password = "yourPASSWORD"; // Replace with your Wi-Fi password

// NTP client setup
WiFiUDP ntpUDP;
NTPClient timeClient(ntpUDP, "pool.ntp.org", 7200, 60000); // UTC+2 for South Africa, update every 60s

void setup() {
  // Initialize Serial Monitor
  Serial.begin(115200);
  Wire.begin(7, 6);
  // Initialize OLED
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
    for (;;);
  }
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SSD1306_WHITE);
  display.setCursor(0, 0);
  display.print("Connecting to WiFi...");
  display.display();

  // Connect to Wi-Fi
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("Connected to Wi-Fi");

  // Initialize time client
  timeClient.begin();

  // Display IP address
  display.clearDisplay();
  display.setCursor(0, 0);
  display.print("WiFi connected");
  display.setCursor(0, 10);
  display.print("IP:");
  display.setCursor(25, 10);
  display.print(WiFi.localIP());
  display.display();
  delay(2000);
  display.clearDisplay();
}

void loop() {
  // Update time from NTP server
  timeClient.update();

  // Get current time
  int currentHour = timeClient.getHours();
  int currentMinute = timeClient.getMinutes();
  int currentSecond = timeClient.getSeconds();

  // Display time label and value
  display.clearDisplay();
  display.setTextSize(2);
  display.setCursor(0, 0);
  display.print("Time:");
  display.setTextSize(1);
  display.setCursor(0, 20);
  if (currentHour < 10) display.print("0");
  display.print(currentHour);
  display.print(":");
  if (currentMinute < 10) display.print("0");
  display.print(currentMinute);
  display.print(":");
  if (currentSecond < 10) display.print("0");
  display.print(currentSecond);

  // Date calculation from epoch
  unsigned long epochTime = timeClient.getEpochTime();
  int days = epochTime / 86400;
  int year = 1970;
  while (days >= 365) {
    if ((year % 4 == 0 && year % 100 != 0) || (year % 400 == 0)) {
      if (days >= 366) {
        days -= 366;
      } else {
        break;
      }
    } else {
      days -= 365;
    }
    year++;
  }

  int monthDays[] = {31, (year % 4 == 0 && year % 100 != 0) || (year % 400 == 0) ? 29 : 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
  int month = 0;
  while (days >= monthDays[month]) {
    days -= monthDays[month];
    month++;
  }

  int day = days + 1;

  // Display date label and value
  display.setTextSize(2);
  display.setCursor(0, 35);
  display.print("Date:");
  display.setTextSize(1);
  display.setCursor(0, 55);
  if (day < 10) display.print("0");
  display.print(day);
  display.print("/");
  if (month + 1 < 10) display.print("0");
  display.print(month + 1);
  display.print("/");
  display.print(year);

  display.display();
  delay(1000);  // Refresh every second
}
